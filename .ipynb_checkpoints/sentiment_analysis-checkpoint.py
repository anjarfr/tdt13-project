{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake = pd.read_csv('archive/Fake.csv')\n",
    "real = pd.read_csv('archive/True.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake['label'] = 0\n",
    "real['label'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([real, fake])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = data.sample(frac=1).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/anja/Projects/tdt13-project/venv/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "sns.countplot(data['label']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data is well-balanced in terms of labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "title      0\n",
       "text       0\n",
       "subject    0\n",
       "date       0\n",
       "label      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "data['subject'].value_counts()\n",
    "plt.figure(figsize = (10,10))\n",
    "sns.countplot(x=data['subject']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 8 different news subjects, where political news are the most frequent. However, there are no"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '0'), Text(1, 0, '1')]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,10))\n",
    "chart = sns.countplot(x = \"label\", hue = \"subject\" , data = data)\n",
    "chart.set_xticklabels(chart.get_xticklabels())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of the "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop(['date'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocess the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /home/anja/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert to lowercase, remove punctuation and tokenize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "\n",
    "punct = string.punctuation + '“”‘’'\n",
    "\n",
    "def clean(article):\n",
    "    lowercase = article.lower()\n",
    "    punctuation = \"\".join([char for char in lowercase if char not in punct])\n",
    "    tokens = nltk.word_tokenize(punctuation)\n",
    "    return tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "tokens = clean(data.iloc[0].text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data['tokenized'] = data.apply(lambda row: nltk.word_tokenize(row['text']), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remove stop words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "stop_words = stopwords.words('english')\n",
    "\n",
    "def remove_stop_words(tokens):\n",
    "    filtered = [word for word in tokens if word not in stop_words]\n",
    "    return filtered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "filtered = remove_stop_words(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['north',\n",
       " 'miami',\n",
       " 'resident',\n",
       " 'shot',\n",
       " 'unarmed',\n",
       " 'exgirlfriend',\n",
       " 'following',\n",
       " 'ladies',\n",
       " 'room',\n",
       " 'denny',\n",
       " '2013',\n",
       " 'facing',\n",
       " 'hearing',\n",
       " 'charged',\n",
       " 'attempted',\n",
       " 'murder',\n",
       " 'lawyers',\n",
       " 'invoking',\n",
       " 'florida',\n",
       " 'insanely',\n",
       " 'loose',\n",
       " 'stand',\n",
       " 'ground',\n",
       " 'law',\n",
       " 'defense',\n",
       " 'law',\n",
       " 'used',\n",
       " 'justify',\n",
       " 'manner',\n",
       " 'shootings',\n",
       " 'statebrooke',\n",
       " 'tuchinsky',\n",
       " 'victim',\n",
       " 'survived',\n",
       " 'broken',\n",
       " 'jaw',\n",
       " 'sean',\n",
       " 'barnes',\n",
       " 'shooter',\n",
       " 'claims',\n",
       " 'saw',\n",
       " 'open',\n",
       " 'purse',\n",
       " 'pull',\n",
       " 'something',\n",
       " 'shiny',\n",
       " 'fearing',\n",
       " 'life',\n",
       " 'pulled',\n",
       " 'gun',\n",
       " 'fired',\n",
       " 'however',\n",
       " 'tuchinsky',\n",
       " 'found',\n",
       " 'unarmed',\n",
       " 'purse',\n",
       " 'closed',\n",
       " 'able',\n",
       " 'put',\n",
       " 'object',\n",
       " 'back',\n",
       " 'purse',\n",
       " 'close',\n",
       " 'getting',\n",
       " 'shot',\n",
       " 'face',\n",
       " 'barnes',\n",
       " 'told',\n",
       " 'baldfaced',\n",
       " 'lie',\n",
       " 'right',\n",
       " 'therebarnes',\n",
       " 'lawyers',\n",
       " 'maintaining',\n",
       " 'never',\n",
       " 'intended',\n",
       " 'use',\n",
       " 'gun',\n",
       " 'anything',\n",
       " 'selfdefense',\n",
       " 'tuchinsky',\n",
       " 'allegedly',\n",
       " 'stalking',\n",
       " 'really',\n",
       " 'needs',\n",
       " 'defense',\n",
       " 'florida',\n",
       " 'dangerous',\n",
       " 'law',\n",
       " 'made',\n",
       " 'vigilante',\n",
       " 'justice',\n",
       " 'shooting',\n",
       " 'people',\n",
       " 'anger',\n",
       " 'entirely',\n",
       " 'easy',\n",
       " 'since',\n",
       " 'people',\n",
       " 'longer',\n",
       " 'need',\n",
       " 'prove',\n",
       " 'tried',\n",
       " 'get',\n",
       " 'situation',\n",
       " 'using',\n",
       " 'lethal',\n",
       " 'forcewhile',\n",
       " 'tuchinsky',\n",
       " 'history',\n",
       " 'causing',\n",
       " 'problems',\n",
       " 'exboyfriends',\n",
       " 'also',\n",
       " 'said',\n",
       " 'barnes',\n",
       " 'threatened',\n",
       " 'bought',\n",
       " 'new',\n",
       " 'gun',\n",
       " 'would',\n",
       " 'love',\n",
       " 'use',\n",
       " 'make',\n",
       " 'look',\n",
       " 'like',\n",
       " 'accident',\n",
       " 'selfdefense',\n",
       " 'sane',\n",
       " 'state',\n",
       " 'would',\n",
       " 'pretty',\n",
       " 'damning',\n",
       " 'even',\n",
       " 'every',\n",
       " 'word',\n",
       " 'barnes',\n",
       " 'spoke',\n",
       " 'tuchinsky',\n",
       " 'actions',\n",
       " 'true',\n",
       " 'florida',\n",
       " 'never',\n",
       " 'florida',\n",
       " 'fact',\n",
       " 'miami',\n",
       " 'judges',\n",
       " 'cleared',\n",
       " 'several',\n",
       " 'people',\n",
       " 'wrongdoing',\n",
       " 'stand',\n",
       " 'ground',\n",
       " 'florida',\n",
       " 'supreme',\n",
       " 'court',\n",
       " 'decided',\n",
       " 'anybody',\n",
       " 'invoking',\n",
       " 'stand',\n",
       " 'ground',\n",
       " 'right',\n",
       " 'hearing',\n",
       " 'judge',\n",
       " 'would',\n",
       " 'decide',\n",
       " 'whether',\n",
       " 'claim',\n",
       " 'valid',\n",
       " 'case',\n",
       " 'would',\n",
       " 'dismissed',\n",
       " 'defendant',\n",
       " 'held',\n",
       " 'responsible',\n",
       " 'legal',\n",
       " 'fees',\n",
       " 'court',\n",
       " 'costsit',\n",
       " 'little',\n",
       " 'difficult',\n",
       " 'claim',\n",
       " 'stand',\n",
       " 'ground',\n",
       " 'lied',\n",
       " 'person',\n",
       " 'facing',\n",
       " 'armed',\n",
       " 'law',\n",
       " 'barnes',\n",
       " 'tried',\n",
       " 'leave',\n",
       " 'denny',\n",
       " 'two',\n",
       " 'got',\n",
       " 'argument',\n",
       " 'requiring',\n",
       " 'employees',\n",
       " 'separate',\n",
       " 'fact',\n",
       " 'remains',\n",
       " 'instead',\n",
       " 'leaving',\n",
       " 'followed',\n",
       " 'likely',\n",
       " 'intent',\n",
       " 'shoot',\n",
       " 'shot',\n",
       " 'lied',\n",
       " 'took',\n",
       " 'place',\n",
       " 'horrible',\n",
       " 'regardless',\n",
       " 'horrible',\n",
       " 'situation',\n",
       " 'wasfeatured',\n",
       " 'image',\n",
       " 'via',\n",
       " 'screen',\n",
       " 'capture']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('north', 'RB'),\n",
       " ('miami', 'JJ'),\n",
       " ('resident', 'NN'),\n",
       " ('shot', 'NN'),\n",
       " ('unarmed', 'JJ'),\n",
       " ('exgirlfriend', 'NN'),\n",
       " ('following', 'VBG'),\n",
       " ('ladies', 'NNS'),\n",
       " ('room', 'NN'),\n",
       " ('denny', 'NN'),\n",
       " ('2013', 'CD'),\n",
       " ('facing', 'VBG'),\n",
       " ('hearing', 'VBG'),\n",
       " ('charged', 'VBN'),\n",
       " ('attempted', 'JJ'),\n",
       " ('murder', 'NN'),\n",
       " ('lawyers', 'NNS'),\n",
       " ('invoking', 'VBG'),\n",
       " ('florida', 'NN'),\n",
       " ('insanely', 'RB'),\n",
       " ('loose', 'JJ'),\n",
       " ('stand', 'VBP'),\n",
       " ('ground', 'NN'),\n",
       " ('law', 'NN'),\n",
       " ('defense', 'NN'),\n",
       " ('law', 'NN'),\n",
       " ('used', 'VBN'),\n",
       " ('justify', 'JJ'),\n",
       " ('manner', 'NN'),\n",
       " ('shootings', 'NNS'),\n",
       " ('statebrooke', 'VBD'),\n",
       " ('tuchinsky', 'JJ'),\n",
       " ('victim', 'NN'),\n",
       " ('survived', 'VBD'),\n",
       " ('broken', 'JJ'),\n",
       " ('jaw', 'NN'),\n",
       " ('sean', 'JJ'),\n",
       " ('barnes', 'NNS'),\n",
       " ('shooter', 'NN'),\n",
       " ('claims', 'NNS'),\n",
       " ('saw', 'VBD'),\n",
       " ('open', 'JJ'),\n",
       " ('purse', 'NN'),\n",
       " ('pull', 'NN'),\n",
       " ('something', 'NN'),\n",
       " ('shiny', 'JJ'),\n",
       " ('fearing', 'JJ'),\n",
       " ('life', 'NN'),\n",
       " ('pulled', 'VBD'),\n",
       " ('gun', 'NN'),\n",
       " ('fired', 'VBN'),\n",
       " ('however', 'RB'),\n",
       " ('tuchinsky', 'JJ'),\n",
       " ('found', 'VBD'),\n",
       " ('unarmed', 'JJ'),\n",
       " ('purse', 'NN'),\n",
       " ('closed', 'VBD'),\n",
       " ('able', 'JJ'),\n",
       " ('put', 'NN'),\n",
       " ('object', 'VBP'),\n",
       " ('back', 'RB'),\n",
       " ('purse', 'NN'),\n",
       " ('close', 'JJ'),\n",
       " ('getting', 'VBG'),\n",
       " ('shot', 'JJ'),\n",
       " ('face', 'NN'),\n",
       " ('barnes', 'NNS'),\n",
       " ('told', 'VBD'),\n",
       " ('baldfaced', 'VBN'),\n",
       " ('lie', 'RB'),\n",
       " ('right', 'JJ'),\n",
       " ('therebarnes', 'NNS'),\n",
       " ('lawyers', 'NNS'),\n",
       " ('maintaining', 'VBG'),\n",
       " ('never', 'RB'),\n",
       " ('intended', 'VBN'),\n",
       " ('use', 'NN'),\n",
       " ('gun', 'NN'),\n",
       " ('anything', 'NN'),\n",
       " ('selfdefense', 'JJ'),\n",
       " ('tuchinsky', 'NN'),\n",
       " ('allegedly', 'RB'),\n",
       " ('stalking', 'VBG'),\n",
       " ('really', 'RB'),\n",
       " ('needs', 'VBZ'),\n",
       " ('defense', 'NN'),\n",
       " ('florida', 'NN'),\n",
       " ('dangerous', 'JJ'),\n",
       " ('law', 'NN'),\n",
       " ('made', 'VBD'),\n",
       " ('vigilante', 'JJ'),\n",
       " ('justice', 'NN'),\n",
       " ('shooting', 'VBG'),\n",
       " ('people', 'NNS'),\n",
       " ('anger', 'VBP'),\n",
       " ('entirely', 'RB'),\n",
       " ('easy', 'JJ'),\n",
       " ('since', 'IN'),\n",
       " ('people', 'NNS'),\n",
       " ('longer', 'RB'),\n",
       " ('need', 'VBP'),\n",
       " ('prove', 'VB'),\n",
       " ('tried', 'JJ'),\n",
       " ('get', 'NN'),\n",
       " ('situation', 'NN'),\n",
       " ('using', 'VBG'),\n",
       " ('lethal', 'JJ'),\n",
       " ('forcewhile', 'JJ'),\n",
       " ('tuchinsky', 'JJ'),\n",
       " ('history', 'NN'),\n",
       " ('causing', 'VBG'),\n",
       " ('problems', 'NNS'),\n",
       " ('exboyfriends', 'NNS'),\n",
       " ('also', 'RB'),\n",
       " ('said', 'VBD'),\n",
       " ('barnes', 'NNS'),\n",
       " ('threatened', 'VBD'),\n",
       " ('bought', 'VBD'),\n",
       " ('new', 'JJ'),\n",
       " ('gun', 'NN'),\n",
       " ('would', 'MD'),\n",
       " ('love', 'VB'),\n",
       " ('use', 'NN'),\n",
       " ('make', 'VBP'),\n",
       " ('look', 'NN'),\n",
       " ('like', 'IN'),\n",
       " ('accident', 'NN'),\n",
       " ('selfdefense', 'NN'),\n",
       " ('sane', 'NN'),\n",
       " ('state', 'NN'),\n",
       " ('would', 'MD'),\n",
       " ('pretty', 'VB'),\n",
       " ('damning', 'VBG'),\n",
       " ('even', 'RB'),\n",
       " ('every', 'DT'),\n",
       " ('word', 'NN'),\n",
       " ('barnes', 'VBZ'),\n",
       " ('spoke', 'VBD'),\n",
       " ('tuchinsky', 'JJ'),\n",
       " ('actions', 'NNS'),\n",
       " ('true', 'JJ'),\n",
       " ('florida', 'RB'),\n",
       " ('never', 'RB'),\n",
       " ('florida', 'VBN'),\n",
       " ('fact', 'NN'),\n",
       " ('miami', 'NN'),\n",
       " ('judges', 'NNS'),\n",
       " ('cleared', 'VBD'),\n",
       " ('several', 'JJ'),\n",
       " ('people', 'NNS'),\n",
       " ('wrongdoing', 'VBG'),\n",
       " ('stand', 'VBP'),\n",
       " ('ground', 'NN'),\n",
       " ('florida', 'JJ'),\n",
       " ('supreme', 'JJ'),\n",
       " ('court', 'NN'),\n",
       " ('decided', 'VBD'),\n",
       " ('anybody', 'NN'),\n",
       " ('invoking', 'VBG'),\n",
       " ('stand', 'VBP'),\n",
       " ('ground', 'NN'),\n",
       " ('right', 'RB'),\n",
       " ('hearing', 'VBG'),\n",
       " ('judge', 'NN'),\n",
       " ('would', 'MD'),\n",
       " ('decide', 'VB'),\n",
       " ('whether', 'IN'),\n",
       " ('claim', 'NN'),\n",
       " ('valid', 'JJ'),\n",
       " ('case', 'NN'),\n",
       " ('would', 'MD'),\n",
       " ('dismissed', 'VBN'),\n",
       " ('defendant', 'JJ'),\n",
       " ('held', 'VBD'),\n",
       " ('responsible', 'JJ'),\n",
       " ('legal', 'JJ'),\n",
       " ('fees', 'NNS'),\n",
       " ('court', 'NN'),\n",
       " ('costsit', 'VBP'),\n",
       " ('little', 'JJ'),\n",
       " ('difficult', 'JJ'),\n",
       " ('claim', 'NN'),\n",
       " ('stand', 'VBP'),\n",
       " ('ground', 'NN'),\n",
       " ('lied', 'VBD'),\n",
       " ('person', 'NN'),\n",
       " ('facing', 'VBG'),\n",
       " ('armed', 'VBN'),\n",
       " ('law', 'NN'),\n",
       " ('barnes', 'NNS'),\n",
       " ('tried', 'VBN'),\n",
       " ('leave', 'VBP'),\n",
       " ('denny', 'JJ'),\n",
       " ('two', 'CD'),\n",
       " ('got', 'VBD'),\n",
       " ('argument', 'JJ'),\n",
       " ('requiring', 'VBG'),\n",
       " ('employees', 'NNS'),\n",
       " ('separate', 'JJ'),\n",
       " ('fact', 'NN'),\n",
       " ('remains', 'VBZ'),\n",
       " ('instead', 'RB'),\n",
       " ('leaving', 'VBG'),\n",
       " ('followed', 'VBN'),\n",
       " ('likely', 'JJ'),\n",
       " ('intent', 'NN'),\n",
       " ('shoot', 'NN'),\n",
       " ('shot', 'NN'),\n",
       " ('lied', 'VBD'),\n",
       " ('took', 'VBD'),\n",
       " ('place', 'NN'),\n",
       " ('horrible', 'JJ'),\n",
       " ('regardless', 'RB'),\n",
       " ('horrible', 'JJ'),\n",
       " ('situation', 'NN'),\n",
       " ('wasfeatured', 'VBD'),\n",
       " ('image', 'NN'),\n",
       " ('via', 'IN'),\n",
       " ('screen', 'JJ'),\n",
       " ('capture', 'NN')]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tagged = nltk.pos_tag(filtered)\n",
    "tagged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import wordnet\n",
    "\n",
    "def get_wordnet_pos(treebank_tag):\n",
    "    if treebank_tag.startswith('J'):\n",
    "        return wordnet.ADJ\n",
    "    elif treebank_tag.startswith('V'):\n",
    "        return wordnet.VERB\n",
    "    elif treebank_tag.startswith('N'):\n",
    "        return wordnet.NOUN\n",
    "    elif treebank_tag.startswith('R'):\n",
    "        return wordnet.ADV\n",
    "    else:\n",
    "        return ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "swn_tagged = list(map(lambda word: (word[0], get_wordnet_pos(word[1])), tagged))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('north', 'r'),\n",
       " ('miami', 'a'),\n",
       " ('resident', 'n'),\n",
       " ('shot', 'n'),\n",
       " ('unarmed', 'a'),\n",
       " ('exgirlfriend', 'n'),\n",
       " ('following', 'v'),\n",
       " ('ladies', 'n'),\n",
       " ('room', 'n'),\n",
       " ('denny', 'n'),\n",
       " ('2013', ''),\n",
       " ('facing', 'v'),\n",
       " ('hearing', 'v'),\n",
       " ('charged', 'v'),\n",
       " ('attempted', 'a'),\n",
       " ('murder', 'n'),\n",
       " ('lawyers', 'n'),\n",
       " ('invoking', 'v'),\n",
       " ('florida', 'n'),\n",
       " ('insanely', 'r'),\n",
       " ('loose', 'a'),\n",
       " ('stand', 'v'),\n",
       " ('ground', 'n'),\n",
       " ('law', 'n'),\n",
       " ('defense', 'n'),\n",
       " ('law', 'n'),\n",
       " ('used', 'v'),\n",
       " ('justify', 'a'),\n",
       " ('manner', 'n'),\n",
       " ('shootings', 'n'),\n",
       " ('statebrooke', 'v'),\n",
       " ('tuchinsky', 'a'),\n",
       " ('victim', 'n'),\n",
       " ('survived', 'v'),\n",
       " ('broken', 'a'),\n",
       " ('jaw', 'n'),\n",
       " ('sean', 'a'),\n",
       " ('barnes', 'n'),\n",
       " ('shooter', 'n'),\n",
       " ('claims', 'n'),\n",
       " ('saw', 'v'),\n",
       " ('open', 'a'),\n",
       " ('purse', 'n'),\n",
       " ('pull', 'n'),\n",
       " ('something', 'n'),\n",
       " ('shiny', 'a'),\n",
       " ('fearing', 'a'),\n",
       " ('life', 'n'),\n",
       " ('pulled', 'v'),\n",
       " ('gun', 'n'),\n",
       " ('fired', 'v'),\n",
       " ('however', 'r'),\n",
       " ('tuchinsky', 'a'),\n",
       " ('found', 'v'),\n",
       " ('unarmed', 'a'),\n",
       " ('purse', 'n'),\n",
       " ('closed', 'v'),\n",
       " ('able', 'a'),\n",
       " ('put', 'n'),\n",
       " ('object', 'v'),\n",
       " ('back', 'r'),\n",
       " ('purse', 'n'),\n",
       " ('close', 'a'),\n",
       " ('getting', 'v'),\n",
       " ('shot', 'a'),\n",
       " ('face', 'n'),\n",
       " ('barnes', 'n'),\n",
       " ('told', 'v'),\n",
       " ('baldfaced', 'v'),\n",
       " ('lie', 'r'),\n",
       " ('right', 'a'),\n",
       " ('therebarnes', 'n'),\n",
       " ('lawyers', 'n'),\n",
       " ('maintaining', 'v'),\n",
       " ('never', 'r'),\n",
       " ('intended', 'v'),\n",
       " ('use', 'n'),\n",
       " ('gun', 'n'),\n",
       " ('anything', 'n'),\n",
       " ('selfdefense', 'a'),\n",
       " ('tuchinsky', 'n'),\n",
       " ('allegedly', 'r'),\n",
       " ('stalking', 'v'),\n",
       " ('really', 'r'),\n",
       " ('needs', 'v'),\n",
       " ('defense', 'n'),\n",
       " ('florida', 'n'),\n",
       " ('dangerous', 'a'),\n",
       " ('law', 'n'),\n",
       " ('made', 'v'),\n",
       " ('vigilante', 'a'),\n",
       " ('justice', 'n'),\n",
       " ('shooting', 'v'),\n",
       " ('people', 'n'),\n",
       " ('anger', 'v'),\n",
       " ('entirely', 'r'),\n",
       " ('easy', 'a'),\n",
       " ('since', ''),\n",
       " ('people', 'n'),\n",
       " ('longer', 'r'),\n",
       " ('need', 'v'),\n",
       " ('prove', 'v'),\n",
       " ('tried', 'a'),\n",
       " ('get', 'n'),\n",
       " ('situation', 'n'),\n",
       " ('using', 'v'),\n",
       " ('lethal', 'a'),\n",
       " ('forcewhile', 'a'),\n",
       " ('tuchinsky', 'a'),\n",
       " ('history', 'n'),\n",
       " ('causing', 'v'),\n",
       " ('problems', 'n'),\n",
       " ('exboyfriends', 'n'),\n",
       " ('also', 'r'),\n",
       " ('said', 'v'),\n",
       " ('barnes', 'n'),\n",
       " ('threatened', 'v'),\n",
       " ('bought', 'v'),\n",
       " ('new', 'a'),\n",
       " ('gun', 'n'),\n",
       " ('would', ''),\n",
       " ('love', 'v'),\n",
       " ('use', 'n'),\n",
       " ('make', 'v'),\n",
       " ('look', 'n'),\n",
       " ('like', ''),\n",
       " ('accident', 'n'),\n",
       " ('selfdefense', 'n'),\n",
       " ('sane', 'n'),\n",
       " ('state', 'n'),\n",
       " ('would', ''),\n",
       " ('pretty', 'v'),\n",
       " ('damning', 'v'),\n",
       " ('even', 'r'),\n",
       " ('every', ''),\n",
       " ('word', 'n'),\n",
       " ('barnes', 'v'),\n",
       " ('spoke', 'v'),\n",
       " ('tuchinsky', 'a'),\n",
       " ('actions', 'n'),\n",
       " ('true', 'a'),\n",
       " ('florida', 'r'),\n",
       " ('never', 'r'),\n",
       " ('florida', 'v'),\n",
       " ('fact', 'n'),\n",
       " ('miami', 'n'),\n",
       " ('judges', 'n'),\n",
       " ('cleared', 'v'),\n",
       " ('several', 'a'),\n",
       " ('people', 'n'),\n",
       " ('wrongdoing', 'v'),\n",
       " ('stand', 'v'),\n",
       " ('ground', 'n'),\n",
       " ('florida', 'a'),\n",
       " ('supreme', 'a'),\n",
       " ('court', 'n'),\n",
       " ('decided', 'v'),\n",
       " ('anybody', 'n'),\n",
       " ('invoking', 'v'),\n",
       " ('stand', 'v'),\n",
       " ('ground', 'n'),\n",
       " ('right', 'r'),\n",
       " ('hearing', 'v'),\n",
       " ('judge', 'n'),\n",
       " ('would', ''),\n",
       " ('decide', 'v'),\n",
       " ('whether', ''),\n",
       " ('claim', 'n'),\n",
       " ('valid', 'a'),\n",
       " ('case', 'n'),\n",
       " ('would', ''),\n",
       " ('dismissed', 'v'),\n",
       " ('defendant', 'a'),\n",
       " ('held', 'v'),\n",
       " ('responsible', 'a'),\n",
       " ('legal', 'a'),\n",
       " ('fees', 'n'),\n",
       " ('court', 'n'),\n",
       " ('costsit', 'v'),\n",
       " ('little', 'a'),\n",
       " ('difficult', 'a'),\n",
       " ('claim', 'n'),\n",
       " ('stand', 'v'),\n",
       " ('ground', 'n'),\n",
       " ('lied', 'v'),\n",
       " ('person', 'n'),\n",
       " ('facing', 'v'),\n",
       " ('armed', 'v'),\n",
       " ('law', 'n'),\n",
       " ('barnes', 'n'),\n",
       " ('tried', 'v'),\n",
       " ('leave', 'v'),\n",
       " ('denny', 'a'),\n",
       " ('two', ''),\n",
       " ('got', 'v'),\n",
       " ('argument', 'a'),\n",
       " ('requiring', 'v'),\n",
       " ('employees', 'n'),\n",
       " ('separate', 'a'),\n",
       " ('fact', 'n'),\n",
       " ('remains', 'v'),\n",
       " ('instead', 'r'),\n",
       " ('leaving', 'v'),\n",
       " ('followed', 'v'),\n",
       " ('likely', 'a'),\n",
       " ('intent', 'n'),\n",
       " ('shoot', 'n'),\n",
       " ('shot', 'n'),\n",
       " ('lied', 'v'),\n",
       " ('took', 'v'),\n",
       " ('place', 'n'),\n",
       " ('horrible', 'a'),\n",
       " ('regardless', 'r'),\n",
       " ('horrible', 'a'),\n",
       " ('situation', 'n'),\n",
       " ('wasfeatured', 'v'),\n",
       " ('image', 'n'),\n",
       " ('via', ''),\n",
       " ('screen', 'a'),\n",
       " ('capture', 'n')]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swn_tagged"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SentiWordNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import sentiwordnet as swn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_score(doc):\n",
    "    score = 0\n",
    "    word_count = 0\n",
    "    for word in doc:\n",
    "        s = list(swn.senti_synsets(word[0], word[1]))\n",
    "        if not s:\n",
    "            continue\n",
    "        score += s[0].pos_score() - s[0].neg_score()\n",
    "        word_count += 1\n",
    "    return score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-4.25"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calc_score(swn_tagged)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate for all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "partial_data = data.copy()[0:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Man Shoots His Ex-Girlfriend In The Face, But...</td>\n",
       "      <td>A North Miami resident shot his unarmed ex-gir...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China supports Cambodia's crackdown on politic...</td>\n",
       "      <td>BEIJING (Reuters) - China supports Cambodia s ...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...</td>\n",
       "      <td></td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...</td>\n",
       "      <td>Apparently the Black Lives Matter terror group...</td>\n",
       "      <td>left-news</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Clinton says 'conspiracy theories' about her h...</td>\n",
       "      <td>(Reuters) - Hillary Clinton, the Democratic Pa...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Putin gave clear response to U.S. hacking alle...</td>\n",
       "      <td>TOKYO (Reuters) - The Kremlin said on Friday t...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>UNFORGIVABLE! PENTAGON WITHHELD $78 MILLION Fr...</td>\n",
       "      <td>Is there a greater crime that we, as a nation ...</td>\n",
       "      <td>politics</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>NIKE DROPS CONSERVATIVE BOXER Manny Pacquiao A...</td>\n",
       "      <td>God forbid an athlete bases their opinions on ...</td>\n",
       "      <td>left-news</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>U.S. appeals to higher court over ruling again...</td>\n",
       "      <td>NEW YORK (Reuters) - The U.S. government took ...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>Betting on the U.S. election via the 'Trump ETF'</td>\n",
       "      <td>NEW YORK (Reuters) - An exchange-traded fund f...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                title  \\\n",
       "0    Man Shoots His Ex-Girlfriend In The Face, But...   \n",
       "1   China supports Cambodia's crackdown on politic...   \n",
       "2   TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...   \n",
       "3   SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...   \n",
       "4   Clinton says 'conspiracy theories' about her h...   \n",
       "..                                                ...   \n",
       "95  Putin gave clear response to U.S. hacking alle...   \n",
       "96  UNFORGIVABLE! PENTAGON WITHHELD $78 MILLION Fr...   \n",
       "97  NIKE DROPS CONSERVATIVE BOXER Manny Pacquiao A...   \n",
       "98  U.S. appeals to higher court over ruling again...   \n",
       "99   Betting on the U.S. election via the 'Trump ETF'   \n",
       "\n",
       "                                                 text          subject  label  \n",
       "0   A North Miami resident shot his unarmed ex-gir...             News      0  \n",
       "1   BEIJING (Reuters) - China supports Cambodia s ...        worldnews      1  \n",
       "2                                                      Government News      0  \n",
       "3   Apparently the Black Lives Matter terror group...        left-news      0  \n",
       "4   (Reuters) - Hillary Clinton, the Democratic Pa...     politicsNews      1  \n",
       "..                                                ...              ...    ...  \n",
       "95  TOKYO (Reuters) - The Kremlin said on Friday t...     politicsNews      1  \n",
       "96  Is there a greater crime that we, as a nation ...         politics      0  \n",
       "97  God forbid an athlete bases their opinions on ...        left-news      0  \n",
       "98  NEW YORK (Reuters) - The U.S. government took ...     politicsNews      1  \n",
       "99  NEW YORK (Reuters) - An exchange-traded fund f...     politicsNews      1  \n",
       "\n",
       "[100 rows x 4 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "partial_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pre_process(x):\n",
    "    c = clean(x)\n",
    "    f = remove_stop_words(c)\n",
    "    p_t = nltk.pos_tag(f)\n",
    "    swn_t = list(map(lambda word: (word[0], get_wordnet_pos(word[1])), p_t))\n",
    "    return swn_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data['tagged'] = data['text'].apply(pre_process)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>label</th>\n",
       "      <th>tagged</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Man Shoots His Ex-Girlfriend In The Face, But...</td>\n",
       "      <td>A North Miami resident shot his unarmed ex-gir...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(north, r), (miami, a), (resident, n), (shot,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China supports Cambodia's crackdown on politic...</td>\n",
       "      <td>BEIJING (Reuters) - China supports Cambodia s ...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(beijing, v), (reuters, n), (china, v), (supp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...</td>\n",
       "      <td></td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...</td>\n",
       "      <td>Apparently the Black Lives Matter terror group...</td>\n",
       "      <td>left-news</td>\n",
       "      <td>0</td>\n",
       "      <td>[(apparently, r), (black, a), (lives, n), (mat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Clinton says 'conspiracy theories' about her h...</td>\n",
       "      <td>(Reuters) - Hillary Clinton, the Democratic Pa...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(reuters, n), (hillary, v), (clinton, n), (de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44893</th>\n",
       "      <td>John McCain Fundraiser BUSTED For Operating A...</td>\n",
       "      <td>Senator John McCain got some bad news on Tuesd...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(senator, n), (john, n), (mccain, n), (got, v...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44894</th>\n",
       "      <td>ANGRY DAD CONFRONTS SCHOOL BOARD After Finding...</td>\n",
       "      <td>We can t say enough great things about this da...</td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(say, v), (enough, a), (great, a), (things, n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44895</th>\n",
       "      <td>Armyworm hits northern Cameroon, worsening foo...</td>\n",
       "      <td>YAOUNDE (Reuters) - Crop-eating fall armyworms...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(yaounde, n), (reuters, n), (cropeating, v), ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44896</th>\n",
       "      <td>This Sheriff Has Threatened To Arrest The CEO...</td>\n",
       "      <td>Apple s fight against the FBI on behalf of the...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(apple, n), (fight, n), (fbi, n), (behalf, n)...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44897</th>\n",
       "      <td>HUH? GERMANS BOMBED PEARL HARBOR? Congressman ...</td>\n",
       "      <td>The video from 2012 is a little blurry but the...</td>\n",
       "      <td>politics</td>\n",
       "      <td>0</td>\n",
       "      <td>[(video, n), (2012, ), (little, a), (blurry, a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44898 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   title  \\\n",
       "0       Man Shoots His Ex-Girlfriend In The Face, But...   \n",
       "1      China supports Cambodia's crackdown on politic...   \n",
       "2      TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...   \n",
       "3      SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...   \n",
       "4      Clinton says 'conspiracy theories' about her h...   \n",
       "...                                                  ...   \n",
       "44893   John McCain Fundraiser BUSTED For Operating A...   \n",
       "44894  ANGRY DAD CONFRONTS SCHOOL BOARD After Finding...   \n",
       "44895  Armyworm hits northern Cameroon, worsening foo...   \n",
       "44896   This Sheriff Has Threatened To Arrest The CEO...   \n",
       "44897  HUH? GERMANS BOMBED PEARL HARBOR? Congressman ...   \n",
       "\n",
       "                                                    text          subject  \\\n",
       "0      A North Miami resident shot his unarmed ex-gir...             News   \n",
       "1      BEIJING (Reuters) - China supports Cambodia s ...        worldnews   \n",
       "2                                                         Government News   \n",
       "3      Apparently the Black Lives Matter terror group...        left-news   \n",
       "4      (Reuters) - Hillary Clinton, the Democratic Pa...     politicsNews   \n",
       "...                                                  ...              ...   \n",
       "44893  Senator John McCain got some bad news on Tuesd...             News   \n",
       "44894  We can t say enough great things about this da...  Government News   \n",
       "44895  YAOUNDE (Reuters) - Crop-eating fall armyworms...        worldnews   \n",
       "44896  Apple s fight against the FBI on behalf of the...             News   \n",
       "44897  The video from 2012 is a little blurry but the...         politics   \n",
       "\n",
       "       label                                             tagged  \n",
       "0          0  [(north, r), (miami, a), (resident, n), (shot,...  \n",
       "1          1  [(beijing, v), (reuters, n), (china, v), (supp...  \n",
       "2          0                                                 []  \n",
       "3          0  [(apparently, r), (black, a), (lives, n), (mat...  \n",
       "4          1  [(reuters, n), (hillary, v), (clinton, n), (de...  \n",
       "...      ...                                                ...  \n",
       "44893      0  [(senator, n), (john, n), (mccain, n), (got, v...  \n",
       "44894      0  [(say, v), (enough, a), (great, a), (things, n...  \n",
       "44895      1  [(yaounde, n), (reuters, n), (cropeating, v), ...  \n",
       "44896      0  [(apple, n), (fight, n), (fbi, n), (behalf, n)...  \n",
       "44897      0  [(video, n), (2012, ), (little, a), (blurry, a...  \n",
       "\n",
       "[44898 rows x 5 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['sentiment_score'] = data['tagged'].apply(calc_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>label</th>\n",
       "      <th>tagged</th>\n",
       "      <th>sentiment_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Man Shoots His Ex-Girlfriend In The Face, But...</td>\n",
       "      <td>A North Miami resident shot his unarmed ex-gir...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(north, r), (miami, a), (resident, n), (shot,...</td>\n",
       "      <td>-4.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China supports Cambodia's crackdown on politic...</td>\n",
       "      <td>BEIJING (Reuters) - China supports Cambodia s ...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(beijing, v), (reuters, n), (china, v), (supp...</td>\n",
       "      <td>-1.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...</td>\n",
       "      <td></td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...</td>\n",
       "      <td>Apparently the Black Lives Matter terror group...</td>\n",
       "      <td>left-news</td>\n",
       "      <td>0</td>\n",
       "      <td>[(apparently, r), (black, a), (lives, n), (mat...</td>\n",
       "      <td>2.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Clinton says 'conspiracy theories' about her h...</td>\n",
       "      <td>(Reuters) - Hillary Clinton, the Democratic Pa...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(reuters, n), (hillary, v), (clinton, n), (de...</td>\n",
       "      <td>0.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44893</th>\n",
       "      <td>John McCain Fundraiser BUSTED For Operating A...</td>\n",
       "      <td>Senator John McCain got some bad news on Tuesd...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(senator, n), (john, n), (mccain, n), (got, v...</td>\n",
       "      <td>-3.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44894</th>\n",
       "      <td>ANGRY DAD CONFRONTS SCHOOL BOARD After Finding...</td>\n",
       "      <td>We can t say enough great things about this da...</td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(say, v), (enough, a), (great, a), (things, n...</td>\n",
       "      <td>11.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44895</th>\n",
       "      <td>Armyworm hits northern Cameroon, worsening foo...</td>\n",
       "      <td>YAOUNDE (Reuters) - Crop-eating fall armyworms...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(yaounde, n), (reuters, n), (cropeating, v), ...</td>\n",
       "      <td>0.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44896</th>\n",
       "      <td>This Sheriff Has Threatened To Arrest The CEO...</td>\n",
       "      <td>Apple s fight against the FBI on behalf of the...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(apple, n), (fight, n), (fbi, n), (behalf, n)...</td>\n",
       "      <td>-0.681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44897</th>\n",
       "      <td>HUH? GERMANS BOMBED PEARL HARBOR? Congressman ...</td>\n",
       "      <td>The video from 2012 is a little blurry but the...</td>\n",
       "      <td>politics</td>\n",
       "      <td>0</td>\n",
       "      <td>[(video, n), (2012, ), (little, a), (blurry, a...</td>\n",
       "      <td>-1.125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44898 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   title  \\\n",
       "0       Man Shoots His Ex-Girlfriend In The Face, But...   \n",
       "1      China supports Cambodia's crackdown on politic...   \n",
       "2      TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...   \n",
       "3      SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...   \n",
       "4      Clinton says 'conspiracy theories' about her h...   \n",
       "...                                                  ...   \n",
       "44893   John McCain Fundraiser BUSTED For Operating A...   \n",
       "44894  ANGRY DAD CONFRONTS SCHOOL BOARD After Finding...   \n",
       "44895  Armyworm hits northern Cameroon, worsening foo...   \n",
       "44896   This Sheriff Has Threatened To Arrest The CEO...   \n",
       "44897  HUH? GERMANS BOMBED PEARL HARBOR? Congressman ...   \n",
       "\n",
       "                                                    text          subject  \\\n",
       "0      A North Miami resident shot his unarmed ex-gir...             News   \n",
       "1      BEIJING (Reuters) - China supports Cambodia s ...        worldnews   \n",
       "2                                                         Government News   \n",
       "3      Apparently the Black Lives Matter terror group...        left-news   \n",
       "4      (Reuters) - Hillary Clinton, the Democratic Pa...     politicsNews   \n",
       "...                                                  ...              ...   \n",
       "44893  Senator John McCain got some bad news on Tuesd...             News   \n",
       "44894  We can t say enough great things about this da...  Government News   \n",
       "44895  YAOUNDE (Reuters) - Crop-eating fall armyworms...        worldnews   \n",
       "44896  Apple s fight against the FBI on behalf of the...             News   \n",
       "44897  The video from 2012 is a little blurry but the...         politics   \n",
       "\n",
       "       label                                             tagged  \\\n",
       "0          0  [(north, r), (miami, a), (resident, n), (shot,...   \n",
       "1          1  [(beijing, v), (reuters, n), (china, v), (supp...   \n",
       "2          0                                                 []   \n",
       "3          0  [(apparently, r), (black, a), (lives, n), (mat...   \n",
       "4          1  [(reuters, n), (hillary, v), (clinton, n), (de...   \n",
       "...      ...                                                ...   \n",
       "44893      0  [(senator, n), (john, n), (mccain, n), (got, v...   \n",
       "44894      0  [(say, v), (enough, a), (great, a), (things, n...   \n",
       "44895      1  [(yaounde, n), (reuters, n), (cropeating, v), ...   \n",
       "44896      0  [(apple, n), (fight, n), (fbi, n), (behalf, n)...   \n",
       "44897      0  [(video, n), (2012, ), (little, a), (blurry, a...   \n",
       "\n",
       "       sentiment_score  \n",
       "0               -4.250  \n",
       "1               -1.500  \n",
       "2                0.000  \n",
       "3                2.250  \n",
       "4                0.375  \n",
       "...                ...  \n",
       "44893           -3.000  \n",
       "44894           11.875  \n",
       "44895            0.750  \n",
       "44896           -0.681  \n",
       "44897           -1.125  \n",
       "\n",
       "[44898 rows x 6 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "\n",
    "scaler = preprocessing.MinMaxScaler(feature_range=(-1, 1))\n",
    "scores = data[['sentiment_score']].values.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.08959835],\n",
       "       [-0.04428424],\n",
       "       [-0.01956746],\n",
       "       ...,\n",
       "       [-0.00720906],\n",
       "       [-0.03078888],\n",
       "       [-0.03810505]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_scores = scaler.fit_transform(scores)\n",
    "normalized_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[['normalized_score']] = scaler.fit_transform(data[['sentiment_score']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>label</th>\n",
       "      <th>tagged</th>\n",
       "      <th>sentiment_score</th>\n",
       "      <th>normalized_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Man Shoots His Ex-Girlfriend In The Face, But...</td>\n",
       "      <td>A North Miami resident shot his unarmed ex-gir...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(north, r), (miami, a), (resident, n), (shot,...</td>\n",
       "      <td>-4.250</td>\n",
       "      <td>-0.089598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>China supports Cambodia's crackdown on politic...</td>\n",
       "      <td>BEIJING (Reuters) - China supports Cambodia s ...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(beijing, v), (reuters, n), (china, v), (supp...</td>\n",
       "      <td>-1.500</td>\n",
       "      <td>-0.044284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...</td>\n",
       "      <td></td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.019567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...</td>\n",
       "      <td>Apparently the Black Lives Matter terror group...</td>\n",
       "      <td>left-news</td>\n",
       "      <td>0</td>\n",
       "      <td>[(apparently, r), (black, a), (lives, n), (mat...</td>\n",
       "      <td>2.250</td>\n",
       "      <td>0.017508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Clinton says 'conspiracy theories' about her h...</td>\n",
       "      <td>(Reuters) - Hillary Clinton, the Democratic Pa...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(reuters, n), (hillary, v), (clinton, n), (de...</td>\n",
       "      <td>0.375</td>\n",
       "      <td>-0.013388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44893</th>\n",
       "      <td>John McCain Fundraiser BUSTED For Operating A...</td>\n",
       "      <td>Senator John McCain got some bad news on Tuesd...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(senator, n), (john, n), (mccain, n), (got, v...</td>\n",
       "      <td>-3.000</td>\n",
       "      <td>-0.069001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44894</th>\n",
       "      <td>ANGRY DAD CONFRONTS SCHOOL BOARD After Finding...</td>\n",
       "      <td>We can t say enough great things about this da...</td>\n",
       "      <td>Government News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(say, v), (enough, a), (great, a), (things, n...</td>\n",
       "      <td>11.875</td>\n",
       "      <td>0.176107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44895</th>\n",
       "      <td>Armyworm hits northern Cameroon, worsening foo...</td>\n",
       "      <td>YAOUNDE (Reuters) - Crop-eating fall armyworms...</td>\n",
       "      <td>worldnews</td>\n",
       "      <td>1</td>\n",
       "      <td>[(yaounde, n), (reuters, n), (cropeating, v), ...</td>\n",
       "      <td>0.750</td>\n",
       "      <td>-0.007209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44896</th>\n",
       "      <td>This Sheriff Has Threatened To Arrest The CEO...</td>\n",
       "      <td>Apple s fight against the FBI on behalf of the...</td>\n",
       "      <td>News</td>\n",
       "      <td>0</td>\n",
       "      <td>[(apple, n), (fight, n), (fbi, n), (behalf, n)...</td>\n",
       "      <td>-0.681</td>\n",
       "      <td>-0.030789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44897</th>\n",
       "      <td>HUH? GERMANS BOMBED PEARL HARBOR? Congressman ...</td>\n",
       "      <td>The video from 2012 is a little blurry but the...</td>\n",
       "      <td>politics</td>\n",
       "      <td>0</td>\n",
       "      <td>[(video, n), (2012, ), (little, a), (blurry, a...</td>\n",
       "      <td>-1.125</td>\n",
       "      <td>-0.038105</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44898 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   title  \\\n",
       "0       Man Shoots His Ex-Girlfriend In The Face, But...   \n",
       "1      China supports Cambodia's crackdown on politic...   \n",
       "2      TREY GOWDY TO DEA CHIEF ON MISCONDUCT: “WHAT T...   \n",
       "3      SHOCK POLL In MUST WIN State Of FLORIDA: Hispa...   \n",
       "4      Clinton says 'conspiracy theories' about her h...   \n",
       "...                                                  ...   \n",
       "44893   John McCain Fundraiser BUSTED For Operating A...   \n",
       "44894  ANGRY DAD CONFRONTS SCHOOL BOARD After Finding...   \n",
       "44895  Armyworm hits northern Cameroon, worsening foo...   \n",
       "44896   This Sheriff Has Threatened To Arrest The CEO...   \n",
       "44897  HUH? GERMANS BOMBED PEARL HARBOR? Congressman ...   \n",
       "\n",
       "                                                    text          subject  \\\n",
       "0      A North Miami resident shot his unarmed ex-gir...             News   \n",
       "1      BEIJING (Reuters) - China supports Cambodia s ...        worldnews   \n",
       "2                                                         Government News   \n",
       "3      Apparently the Black Lives Matter terror group...        left-news   \n",
       "4      (Reuters) - Hillary Clinton, the Democratic Pa...     politicsNews   \n",
       "...                                                  ...              ...   \n",
       "44893  Senator John McCain got some bad news on Tuesd...             News   \n",
       "44894  We can t say enough great things about this da...  Government News   \n",
       "44895  YAOUNDE (Reuters) - Crop-eating fall armyworms...        worldnews   \n",
       "44896  Apple s fight against the FBI on behalf of the...             News   \n",
       "44897  The video from 2012 is a little blurry but the...         politics   \n",
       "\n",
       "       label                                             tagged  \\\n",
       "0          0  [(north, r), (miami, a), (resident, n), (shot,...   \n",
       "1          1  [(beijing, v), (reuters, n), (china, v), (supp...   \n",
       "2          0                                                 []   \n",
       "3          0  [(apparently, r), (black, a), (lives, n), (mat...   \n",
       "4          1  [(reuters, n), (hillary, v), (clinton, n), (de...   \n",
       "...      ...                                                ...   \n",
       "44893      0  [(senator, n), (john, n), (mccain, n), (got, v...   \n",
       "44894      0  [(say, v), (enough, a), (great, a), (things, n...   \n",
       "44895      1  [(yaounde, n), (reuters, n), (cropeating, v), ...   \n",
       "44896      0  [(apple, n), (fight, n), (fbi, n), (behalf, n)...   \n",
       "44897      0  [(video, n), (2012, ), (little, a), (blurry, a...   \n",
       "\n",
       "       sentiment_score  normalized_score  \n",
       "0               -4.250         -0.089598  \n",
       "1               -1.500         -0.044284  \n",
       "2                0.000         -0.019567  \n",
       "3                2.250          0.017508  \n",
       "4                0.375         -0.013388  \n",
       "...                ...               ...  \n",
       "44893           -3.000         -0.069001  \n",
       "44894           11.875          0.176107  \n",
       "44895            0.750         -0.007209  \n",
       "44896           -0.681         -0.030789  \n",
       "44897           -1.125         -0.038105  \n",
       "\n",
       "[44898 rows x 7 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='subject', ylabel='normalized_score'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(20,10)})\n",
    "sns.set(font_scale=1.4)\n",
    "sns.boxplot(x=data.subject, y=data.normalized_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='label', ylabel='normalized_score'>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=data.label, y=data.normalized_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "label_true = data[data['label'] == 1]\n",
    "label_fake = data[data['label'] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    21417.000000\n",
       "mean        -0.002340\n",
       "std          0.056478\n",
       "min         -0.334706\n",
       "25%         -0.031926\n",
       "50%         -0.009269\n",
       "75%          0.023687\n",
       "max          1.000000\n",
       "Name: normalized_score, dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_true.normalized_score.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    23481.000000\n",
       "mean        -0.002566\n",
       "std          0.066716\n",
       "min         -1.000000\n",
       "25%         -0.033986\n",
       "50%         -0.009269\n",
       "75%          0.025961\n",
       "max          0.821726\n",
       "Name: normalized_score, dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_fake.normalized_score.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "def weak_label(score):\n",
    "    if score >= 0.002 or score <= -0.002:\n",
    "        return 1\n",
    "    return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['weak_label'] = data['normalized_score'].apply(weak_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.to_csv('weaklabeled_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4980427291134981\n",
      "0.47661365762394764\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score, accuracy_score\n",
    "print(roc_auc_score(data['label'], data['weak_label']))\n",
    "print(accuracy_score(data['label'], data['weak_label']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Word embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('weaklabeled_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Flatten\n",
    "from keras.layers import Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "docs = data.text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "titles = data.title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = Tokenizer()\n",
    "t.fit_on_texts(docs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "138022"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab_size = len(t.word_index) + 1\n",
    "vocab_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "encoded_docs = t.texts_to_sequences(docs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_length = len(max(encoded_docs, key=len))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44898"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "padded_docs = pad_sequences(encoded_docs, maxlen=max_length, padding='post')\n",
    "len(padded_docs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "embeddings_index = dict()\n",
    "with open('glove.6B/glove.6B.100d.txt') as f:\n",
    "    for line in f:\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        coefs = np.asarray(values[1:], dtype='float32')\n",
    "        embeddings_index[word] = coefs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 400000 word vectors.\n"
     ]
    }
   ],
   "source": [
    "print('Loaded %s word vectors.' % len(embeddings_index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "embedding_matrix = np.zeros((vocab_size, 100))\n",
    "for word, i in t.word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[i] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(138022, 100)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embedding_matrix.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_weak = data.weak_label.values\n",
    "y_true = data.label.values\n",
    "y_weak"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_1 (Embedding)      (None, 8375, 100)         13802200  \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 837500)            0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 837501    \n",
      "=================================================================\n",
      "Total params: 14,639,701\n",
      "Trainable params: 837,501\n",
      "Non-trainable params: 13,802,200\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "e = Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=max_length, trainable=False)\n",
    "model.add(e)\n",
    "model.add(Flatten())\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "# compile the model\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "# summarize the model\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3\n",
      "2807/2807 [==============================] - 52s 18ms/step - loss: 0.2255 - accuracy: 0.9661\n",
      "Epoch 2/3\n",
      "2807/2807 [==============================] - 51s 18ms/step - loss: 0.0926 - accuracy: 0.9790\n",
      "Epoch 3/3\n",
      "2807/2807 [==============================] - 53s 19ms/step - loss: 0.0865 - accuracy: 0.9813\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f24f41ba1f0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(padded_docs, y_weak, epochs=3, verbose=1, batch_size=16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /home/anja/Projects/tdt13-project/venv/lib/python3.8/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This property should not be used in TensorFlow 2.0, as updates are applied automatically.\n",
      "WARNING:tensorflow:From /home/anja/Projects/tdt13-project/venv/lib/python3.8/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This property should not be used in TensorFlow 2.0, as updates are applied automatically.\n",
      "INFO:tensorflow:Assets written to: keras_model/assets\n"
     ]
    }
   ],
   "source": [
    "model.save('keras_model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1404/1404 [==============================] - 30s 22ms/step - loss: 0.0328 - accuracy: 0.9911\n",
      "Accuracy: 99.113548\n"
     ]
    }
   ],
   "source": [
    "loss, accuracy = model.evaluate(padded_docs, y_weak, verbose=1)\n",
    "print('Accuracy: %f' % (accuracy*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
